I want to create an homepage where there are the following:

- Introduce the problem of fair allocation of indivisible goods, and the existsing algorithm,
- possiblity of trying the allocaiton computation, that is the part I have already implemented,
- possiblity of choosing the algorithm to explain better

In particular, I would like an upper bar where there are the following: "Run algorithm", that lead to the current allocaiton computation, and "Algorithm" that open a dropdown where you can select the algorithm to explain deeply

These are the current files:

// allocation_app/static/scripts/main.js

document.addEventListener('DOMContentLoaded', function() {
    const preferencesForm = document.getElementById('preferences-form');
    const loadingDiv = document.getElementById('loading');
    if (preferencesForm && loadingDiv) {
        preferencesForm.addEventListener('submit', function() {
            // Show loading animation
            loadingDiv.style.display = 'block';
        });
    }

    // Error Tooltip Functionality
    const errorMessages = document.querySelectorAll('.error-message');

    errorMessages.forEach(function(errorSpan) {
        const inputField = errorSpan.previousElementSibling;
        const errorMessage = errorSpan.getAttribute('data-error');

        // Create a tooltip element
        const tooltip = document.createElement('div');
        tooltip.className = 'tooltip-error';
        tooltip.innerText = errorMessage;

        // Insert the tooltip into the DOM
        errorSpan.parentNode.appendChild(tooltip);

        // Show tooltip on focus
        inputField.addEventListener('focus', function() {
            tooltip.style.display = 'block';
        });

        // Hide tooltip on blur
        inputField.addEventListener('blur', function() {
            tooltip.style.display = 'none';
        });
    });
});

---------------------------------------

/* allocation_app/static/css/styles.css */

/* Global Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f0f2f5;
    margin: 0;
    padding: 0;
    color: #333;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 30px auto;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-sizing: border-box;
}

header {
    text-align: center;
    padding: 40px 20px;
    background-color: #4a90e2;
    color: #fff;
}

header h1 {
    margin: 0;
    font-size: 2.5em;
    font-weight: 300;
}

.main-content {
    display: flex;
    flex: 1;
    flex-wrap: wrap;
}

.content {
    flex: 1;
    padding: 40px 30px;
    box-sizing: border-box;
    min-width: 0;
}

/* Sidebar Styles */
.sidebar {
    width: 280px;
    padding: 30px 20px;
    background-color: #f7f9fc;
    border-right: 1px solid #e6e9ed;
    box-sizing: border-box;
    flex-shrink: 0;
    overflow: hidden;
}

.sidebar h2 {
    font-size: 1.5em;
    margin-bottom: 20px;
    color: #4a90e2;
}

.sidebar p {
    margin-bottom: 15px;
}

.sidebar a, .sidebar button {
    display: block;
    width: auto;
    text-align: center;
    background-color: #4a90e2;
    color: #fff;
    padding: 12px;
    border: none;
    border-radius: 8px;
    text-decoration: none;
    margin-bottom: 10px;
    font-size: 1em;
    cursor: pointer;
}

.sidebar a:hover, .sidebar button:hover {
    background-color: #4072b8;
}

.sidebar .form-group input[type="number"],
.sidebar .form-group select {
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
}

.sidebar .form-group {
    margin-bottom: 15px;
}

/* Form Styles */
form {
    margin-bottom: 30px;
    max-width: 100%;
}

.form-group {
    margin-bottom: 20px;
    position: relative;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
}

.form-group input[type="number"],
.form-group select {
    width: 90%;
    max-width: 100%;
    padding: 12px 15px;
    border: 1px solid #ccd0d5;
    border-radius: 8px;
    background-color: #fff;
    font-size: 1em;
    transition: border-color 0.3s;
    box-sizing: border-box;
}

.form-group input[type="number"]:focus,
.form-group select:focus {
    border-color: #4a90e2;
    outline: none;
}

button[type="submit"], .button-link {
    background-color: #4a90e2;
    color: #fff;
    padding: 15px 25px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1.1em;
    transition: background-color 0.3s;
    text-decoration: none;
    display: inline-block;
    margin: 5px 0;
}

button[type="submit"]:hover, .button-link:hover {
    background-color: #4072b8;
}

/* Table Container */
.table-responsive {
    width: 100%;
    overflow-x: auto;
}

/* Table Styles */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    border-radius: 8px;
    overflow: hidden;
    table-layout: fixed;
}

table th, table td {
    padding: 15px;
    text-align: center;
    border-bottom: 1px solid #e6e9ed;
    word-wrap: break-word;
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
}

table th {
    background-color: #f0f2f5;
    color: #333;
    font-weight: 600;
}

table tr:nth-child(even) {
    background-color: #fafbfc;
}

table tr:hover {
    background-color: #f1f3f5;
}

table input[type="number"] {
    width: 100%;
    max-width: 100%;
    padding: 8px;
    box-sizing: border-box;
    font-size: 1em;
}

/* Error Tooltip */
.tooltip-error {
    position: absolute;
    top: 100%;
    left: 0;
    background-color: #f44336;
    color: #fff;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 0.9em;
    margin-top: 5px;
    z-index: 1000;
    width: calc(100% - 20px);
    box-sizing: border-box;
}

.tooltip-error::before {
    content: '';
    position: absolute;
    top: -6px;
    left: 20px;
    border-width: 6px;
    border-style: solid;
    border-color: transparent transparent #f44336 transparent;
}

/* Table Responsive Horizontal */
.table-responsive-horizontal {
    width: 100%;
    overflow-x: auto;
}

.table-responsive-horizontal table {
    width: max-content;
    min-width: 100%;
    border-collapse: collapse;
}

.table-responsive-horizontal th,
.table-responsive-horizontal td {
    padding: 10px;
    text-align: center;
    border-bottom: 1px solid #e6e9ed;
    white-space: nowrap;
}

.table-responsive-horizontal th {
    background-color: #f0f2f5;
    color: #333;
    font-weight: 600;
}

.table-responsive-horizontal tr:nth-child(even) {
    background-color: #fafbfc;
}

.table-responsive-horizontal tr:hover {
    background-color: #f1f3f5;
}

.table-responsive-horizontal input[type="number"] {
    width: 80px;
    padding: 8px;
    box-sizing: border-box;
    font-size: 1em;
}

/* Fixed First Column */
.table-responsive-horizontal {
    position: relative;
}

.table-responsive-horizontal table {
    position: relative;
}

.table-responsive-horizontal th:first-child,
.table-responsive-horizontal td:first-child {
    position: sticky;
    left: 0;
    background-color: #f0f2f5;
    z-index: 1;
}

.table-responsive-horizontal th:first-child {
    z-index: 2;
}

/* Adjusting content to prevent overflow */
.content {
    overflow-x: hidden;
}

/* Optional scrollbar styling */
.table-responsive-horizontal::-webkit-scrollbar {
    height: 8px;
}

.table-responsive-horizontal::-webkit-scrollbar-thumb {
    background-color: #c1c1c1;
    border-radius: 4px;
}

.table-responsive-horizontal::-webkit-scrollbar-track {
    background-color: #e1e1e1;
}

/* Loading Animation */
#loading {
    display: none;
    margin-top: 20px;
    text-align: center;
}

.loading-spinner {
    border: 8px solid #f3f3f3;
    border-top: 8px solid #4a90e2;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1s linear infinite;
    margin: auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 768px) {
    .main-content {
        flex-direction: column;
    }

    .sidebar, .content {
        width: 100%;
        padding: 20px;
    }

    .sidebar {
        border-right: none;
        border-bottom: 1px solid #e6e9ed;
    }

    .container {
        width: 100%;
        margin: 0;
        border-radius: 0;
    }
}

----------------------------------

<!-- allocation_app/templates/allocation_app/base.html -->

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Fair Allocation of Indivisible Items</title>
    <link rel="stylesheet" href="{% static 'styles/styles.css' %}">
    <script src="{% static 'scripts/main.js' %}"></script>
</head>
<body>
    <div class="container">
        <header>
            <h1>Fair Allocation of Indivisible Items</h1>
        </header>
        <div class="main-content">
            <aside class="sidebar">
                {% block sidebar %}
                {% endblock sidebar %}
            </aside>
            <section class="content">
                {% block content %}
                {% endblock content %}
            </section>
        </div>
    </div>
</body>
</html>

<!-- allocation_app/templates/allocation_app/selections.html -->

{% extends 'allocation_app/base.html' %}
{% block title %}Allocation App{% endblock %}

{% block sidebar %}
    <h2>Parameters</h2>
    <form method="post" id="selection-form">
        {% csrf_token %}
        <div class="form-group">
            {{ alg_form.algorithm.label_tag }}
            {{ alg_form.algorithm }}
            {% if alg_form.algorithm.errors %}
                <span class="error-message" data-error="{{ alg_form.algorithm.errors|join:' ' }}"></span>
            {% endif %}
        </div>
        <div class="form-group">
            {{ num_form.num_agents.label_tag }}
            {{ num_form.num_agents }}
            {% if num_form.num_agents.errors %}
                <span class="error-message" data-error="{{ num_form.num_agents.errors|join:' ' }}"></span>
            {% endif %}
        </div>
        <div class="form-group">
            {{ num_form.num_items.label_tag }}
            {{ num_form.num_items }}
            {% if num_form.num_items.errors %}
                <span class="error-message" data-error="{{ num_form.num_items.errors|join:' ' }}"></span>
            {% endif %}
        </div>
        <button type="submit" class="button-link">Submit Preferences</button>
    </form>
{% endblock sidebar %}


{% extends 'allocation_app/base.html' %}
{% block title %}Input Preferences - Allocation App{% endblock %}

{% block sidebar %}
    <h2>Summary</h2>
    <p><strong>Algorithm:</strong> {{ algorithm }}</p>
    <p><strong>Agents:</strong> {{ agents|length }}</p>
    <p><strong>Items:</strong> {{ items|length }}</p>
    <p>
        <a href="{% url 'selections' %}" class="button-link">Change Parameters</a>
    </p>
{% endblock sidebar %}

{% block content %}
<h1>Input Preferences</h1>
<form method="post" id="preferences-form">
    {% csrf_token %}
    <div class="table-responsive-horizontal">
        <table>
            <thead>
                <tr>
                    <th> Agents / Items </th>
                    {% for item in items %}
                        <th>{{ item }}</th>
                    {% endfor %}
                </tr>
            </thead>
            {% load html_filters %}
            <tbody>
                {% for agent_index, agent in agents|get_enumerate %}
                    <tr>
                        <td>{{ agent }}</td>
                        {% for item_index, item in items|get_enumerate %}
                            <td>
                                <input type="number" name="preferences-{{ item }}-{{ agent }}" step="any" required>
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <button type="submit" class="button-link">Submit Preferences</button>
</form>
{% endblock content %}


<!-- allocation_app/templates/allocation_app/show_allocation.html -->

{% extends 'allocation_app/base.html' %}
{% block title %}Allocation Result - Allocation App{% endblock %}

{% block sidebar %}
    <!-- Optionally, include a summary of selected parameters or navigation links -->
    <h2>Summary</h2>
    <p><strong>Algorithm:</strong> {{ algorithm }}</p>
    <p><strong>Agents:</strong> {{ agents|length }}</p>
    <p><strong>Items:</strong> {{ items|length }}</p>
    <p>
        <a href="{% url 'selections' %}" class="button-link">Return to Parameter Selection</a>
    </p>
    <p>
        <a href="{% url 'input_preferences' %}" class="button-link">Return to Input Preferences</a>
    </p>
{% endblock sidebar %}

{% block content %}
<h1>Preference Profile</h1>
<div class="table-responsive">
    <table>
        <thead>
            <tr>
                <th>Item / Agent</th>
                {% for item in items %}
                    <th>{{ item }}</th>
                {% endfor %}    
            </tr>
        </thead>
        <tbody>
            {% load html_filters %}
            {% for agent_index in agents_indices %}       
                <tr>
                    <td>{{ agents|get_item:agent_index }}</td>         
                    {% for item_index in items_indices %}
                        <td>{{ preferences|get_item:agent_index|get_item:item_index }}</td>
                    {% endfor %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
<h1>Allocation Result</h1>
{% for allocation in allocations %}
<div class="table-responsive">
    <table>
        <thead>
            <tr>
                <th>Agent</th>
                <th>Allocated Items</th>
            </tr>
        </thead>
        <tbody>
            {% load html_filters %}

            {% for agent_index in agents_indices %}
                <tr>
                    <td>{{ agents|get_item:agent_index }}</td>
                    <td>{{ allocation|get_item:agent_index | join:", " }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endfor %}


{% endblock content %}

----------------------------------------

# allocation_app/urls.py

from django.urls import path
from .views.selectionsview import SelectionsView
from .views.inputpreferencesview import InputPreferencesView
from .views.showallocationview import ShowAllocationView

urlpatterns = [
    path('', SelectionsView.as_view(), name='selections'),
    path('input_preferences/', InputPreferencesView.as_view(), name='input_preferences'),
    path('show_allocation/', ShowAllocationView.as_view(), name='show_allocation'),
]

and the views are one for the selections, one for the preferences input and one for the allocation showing